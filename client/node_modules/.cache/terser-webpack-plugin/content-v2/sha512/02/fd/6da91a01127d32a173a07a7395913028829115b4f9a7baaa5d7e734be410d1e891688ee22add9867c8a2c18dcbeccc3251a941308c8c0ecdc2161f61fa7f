{"map":"{\"version\":3,\"sources\":[\"C:\\\\Go\\\\src\\\\emailConfirmation\\\\client\\\\src\\\\components\\\\Register.js\",\"C:\\\\Go\\\\src\\\\emailConfirmation\\\\client\\\\src\\\\components\\\\Verify.js\",\"C:\\\\Go\\\\src\\\\emailConfirmation\\\\client\\\\src\\\\App.js\",\"C:\\\\Go\\\\src\\\\emailConfirmation\\\\client\\\\src\\\\serviceWorker.js\",\"C:\\\\Go\\\\src\\\\emailConfirmation\\\\client\\\\src\\\\index.js\"],\"names\":[\"Register\",\"_Component\",\"_getPrototypeOf2\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"_len\",\"arguments\",\"length\",\"args\",\"Array\",\"_key\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"apply\",\"concat\",\"state\",\"email\",\"message\",\"handleChange\",\"e\",\"setState\",\"defineProperty\",\"target\",\"id\",\"value\",\"handleSubmit\",\"preventDefault\",\"userInfo\",\"axios\",\"post\",\"then\",\"res\",\"data\",\"inherits\",\"createClass\",\"key\",\"react_default\",\"a\",\"createElement\",\"className\",\"type\",\"onChange\",\"htmlFor\",\"onClick\",\"style\",\"overflowY\",\"height\",\"Component\",\"Verify\",\"redirect\",\"_this2\",\"props\",\"match\",\"params\",\"console\",\"log\",\"get\",\"setTimeout\",\"Redirect\",\"to\",\"App\",\"BrowserRouter\",\"Route\",\"exact\",\"path\",\"component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"mRA+FeA,EA3Ff,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,IAAA,IAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNC,MAAO,GACPC,QAAS,IAHbjB,EAMEkB,aAAe,SAACC,GACdnB,EAAKoB,SAALnB,OAAAoB,EAAA,EAAApB,CAAA,GACGkB,EAAEG,OAAOC,GAAMJ,EAAEG,OAAOE,SAR/BxB,EAaEyB,aAAe,SAACN,GAEd,GADAA,EAAEO,iBACoB,KAAnB1B,EAAKe,MAAMC,MAAW,CACvB,IAAMW,EAAW,CACfX,MAAOhB,EAAKe,MAAMC,OAEpBY,EAAAA,EAAMC,KAAN,QAAoBF,GACjBG,KAAK,SAAAC,GACJ/B,EAAKoB,SAAS,CACZH,QAAUc,EAAIC,KAAKf,cAtB/BjB,EAAA,OAAAC,OAAAgC,EAAA,EAAAhC,CAAAJ,EAAAC,GAAAG,OAAAiC,EAAA,EAAAjC,CAAAJ,EAAA,CAAA,CAAAsC,IAAA,SAAAX,MAAA,WA+BI,OACEY,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAA,KAAA,sBACAF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAA,KACEF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAA,CAAOE,KAAK,OAAOjB,GAAG,QAAQC,MAAOrB,KAAKY,MAAMC,MAAOyB,SAAUtC,KAAKe,eACtEkB,EAAAC,EAAAC,cAAA,QAAA,CAAOI,QAAQ,SAAf,WAIJN,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,oCAAoCI,QAASxC,KAAKsB,cAAjE,SACAW,EAAAC,EAAAC,cAAA,KAAA,MAE2B,KAAvBnC,KAAKY,MAAME,QAAkBmB,EAAAC,EAAAC,cAAA,KAAA,MAASF,EAAAC,EAAAC,cAAA,MAAA,KAAMnC,KAAKY,MAAME,WAI/DmB,EAAAC,EAAAC,cAAA,KAAA,KAAA,sBACAF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,0BAA0BK,MAAO,CAACC,UAAU,OAAQC,OAAQ,MACzEV,EAAAC,EAAAC,cAAA,IAAA,KAAA,gBACAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,wGACmBF,EAAAC,EAAAC,cAAA,IAAA,KAAA,yEACnBF,EAAAC,EAAAC,cAAA,IAAA,KAAA,eACAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,8CAGAF,EAAAC,EAAAC,cAAA,IAAA,KAAA,YACAF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,6DAGAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,0EAGAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,iGAEEF,EAAAC,EAAAC,cAAA,KAAA,KACEF,EAAAC,EAAAC,cAAA,KAAA,KAAA,4FAGAF,EAAAC,EAAAC,cAAA,KAAA,KAAA,iGAKJF,EAAAC,EAAAC,cAAA,KAAA,KAAA,sLA/EdzC,EAAA,CAA8BkD,EAAAA,mBCsCfC,EArCf,SAAAlD,GAAA,SAAAkD,IAAA,IAAAjD,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6C,GAAA,IAAA,IAAA5C,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAA+C,IAAApC,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACEQ,MAAQ,CACNE,QAAS,GACTgC,UAAU,GAHdjD,EAAA,OAAAC,OAAAgC,EAAA,EAAAhC,CAAA+C,EAAAlD,GAAAG,OAAAiC,EAAA,EAAAjC,CAAA+C,EAAA,CAAA,CAAAb,IAAA,oBAAAX,MAAA,WAOuB,IAAA0B,EAAA/C,KACXoB,EAAOpB,KAAKgD,MAAMC,MAAMC,OAAxB9B,GACR+B,QAAQC,IAAIhC,GACZK,EAAAA,EAAM4B,IAAN,eAAA1C,OAAyBS,IACtBO,KAAK,SAAAC,GACJmB,EAAK9B,SAAS,CACZH,QAAUc,EAAIC,KAAKf,QAAQ,8DAG/BwC,WAAW,WACPP,EAAK9B,SAAS,CACV6B,UAAU,KAEf,OApBT,CAAAd,IAAA,SAAAX,MAAA,WA0BI,OACEY,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aACZpC,KAAKY,MAAME,SAEgB,IAAxBd,KAAKY,MAAMkC,SAAsBb,EAAAC,EAAAC,cAAA,KAAA,MAASF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAUC,GAAG,WA9BnEX,EAAA,CAA4BD,EAAAA,WCeba,mLAbX,OACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAY,aACfH,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAIC,UAAapE,IACpCuC,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAAOE,KAAK,cAAcC,UAAWjB,cAP/BD,EAAAA,WCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjB,MACvB,2DCZNkB,EAAAA,EAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react'\\r\\nimport axios from 'axios'\\r\\n\\r\\n\\r\\nexport class Register extends Component{\\r\\n  state = {\\r\\n    email: '',\\r\\n    message: ''\\r\\n  }\\r\\n\\r\\n  handleChange = (e) => {\\r\\n    this.setState({\\r\\n      [e.target.id] : e.target.value\\r\\n    })\\r\\n  }\\r\\n\\r\\n\\r\\n  handleSubmit = (e) => {\\r\\n    e.preventDefault()\\r\\n    if(this.state.email!==\\\"\\\"){\\r\\n      const userInfo = {\\r\\n        email: this.state.email\\r\\n      }\\r\\n      axios.post(`/api/`, userInfo)\\r\\n        .then(res => {\\r\\n          this.setState({\\r\\n            message : res.data.message\\r\\n          })\\r\\n        })\\r\\n    }\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  render(){\\r\\n    return(\\r\\n      <div className=\\\"container\\\">\\r\\n        <h3>Email Verification</h3>\\r\\n        <div className=\\\"row z-depth-2\\\">\\r\\n          <div className=\\\"col s12 white z-depth-1\\\">\\r\\n            <form>\\r\\n              <div className=\\\"input-field\\\">\\r\\n                <input type=\\\"text\\\" id=\\\"email\\\" value={this.state.email} onChange={this.handleChange} />\\r\\n                <label htmlFor=\\\"email\\\">Email</label>\\r\\n              </div>\\r\\n            </form>\\r\\n\\r\\n            <div className=\\\"btn blue waves-effect waves-light\\\" onClick={this.handleSubmit} >Login</div>\\r\\n            <br />\\r\\n            {\\r\\n               (this.state.message === '') ? <br /> : <div>{this.state.message}</div>\\r\\n            }\\r\\n          </div>\\r\\n        </div>\\r\\n        <h4>About This Program</h4>\\r\\n        <div className=\\\"row z-depth-2\\\">\\r\\n          <div className=\\\"col s12 white z-depth-1\\\" style={{overflowY:\\\"auto\\\", height: 300}} >\\r\\n            <b>Description:</b>\\r\\n            <p>This program simulates the process of verifying newly registered accounts through\\r\\n            the use of emails. <i>Note: Emails using Microsoft Outlook may alter the confirmation url.</i></p>\\r\\n            <b>Components:</b>\\r\\n            <p>\\r\\n              ReactJS, MaterializeCSS, GO, MongoDB(mLab)\\r\\n            </p>\\r\\n            <b>Process:</b>\\r\\n            <ol>\\r\\n              <li>\\r\\n                The user submits their email address into the form above.\\r\\n              </li>\\r\\n              <li>\\r\\n                The email is sent to the back-end through an HTTP request using Axios.\\r\\n              </li>\\r\\n              <li>\\r\\n                The GO back-end takes the email and checks to see if the email exists in the MongoDB database.\\r\\n                <ul>\\r\\n                  <li>\\r\\n                    If the email does not exist in the database, the user will be sent a verification email.\\r\\n                  </li>\\r\\n                  <li>\\r\\n                    If the email already exists, the user will be notified that an email has already been sent.\\r\\n                  </li>\\r\\n                </ul>\\r\\n              </li>\\r\\n              <li>\\r\\n                The user will receive an email with the verification link. Upon submission of the link\\r\\n                the user's email will then be verified and completely registered into the database.\\r\\n              </li>\\r\\n            </ol>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Register\\r\\n\",\"import React, { Component } from 'react'\\r\\nimport axios from 'axios'\\r\\nimport { Redirect } from 'react-router-dom'\\r\\n\\r\\n\\r\\nexport class Verify extends Component{\\r\\n  state = {\\r\\n    message: '',\\r\\n    redirect: false\\r\\n  }\\r\\n\\r\\n\\r\\n  componentDidMount () {\\r\\n    const { id } = this.props.match.params\\r\\n    console.log(id)\\r\\n    axios.get(`/api/verify/${id}`)\\r\\n      .then(res => {\\r\\n        this.setState({\\r\\n          message : res.data.message+\\\" You will automatically be redirected to the main page.\\\"\\r\\n        })\\r\\n      })\\r\\n      setTimeout(() => {\\r\\n          this.setState({\\r\\n              redirect: true,\\r\\n          })\\r\\n      }, 8000)\\r\\n  }\\r\\n\\r\\n\\r\\n\\r\\n  render(){\\r\\n    return(\\r\\n      <div className=\\\"container\\\">\\r\\n        {this.state.message}\\r\\n        {\\r\\n           (this.state.redirect === false) ? <br /> : <Redirect to='/' />\\r\\n        }\\r\\n      </div>\\r\\n    )\\r\\n  }\\r\\n}\\r\\n\\r\\nexport default Verify\\r\\n\",\"import React, { Component } from 'react';\\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\\nimport Register from './components/Register'\\nimport Verify from './components/Verify'\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <Router>\\n        <div className=\\\"App\\\">\\n          <div className = \\\"container\\\">\\n            <Route exact path =\\\"/\\\" component = {Register} />\\n            <Route path=\\\"/verify/:id\\\" component={Verify}/>\\n          </div>\\n        </div>\\n      </Router>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{24:function(e,t,a){e.exports=a(53)},30:function(e,t,a){},53:function(e,t,a){\"use strict\";a.r(t);var n=a(0),l=a.n(n),i=a(21),r=a.n(i),s=(a(30),a(6)),c=a(7),o=a(9),m=a(8),u=a(10),h=a(56),d=a(55),f=a(22),p=a(12),b=a.n(p),E=function(e){function t(){var e,a;Object(s.a)(this,t);for(var n=arguments.length,l=new Array(n),i=0;i<n;i++)l[i]=arguments[i];return(a=Object(o.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(l)))).state={email:\"\",message:\"\"},a.handleChange=function(e){a.setState(Object(f.a)({},e.target.id,e.target.value))},a.handleSubmit=function(e){if(e.preventDefault(),\"\"!==a.state.email){var t={email:a.state.email};b.a.post(\"/api/\",t).then(function(e){a.setState({message:e.data.message})})}},a}return Object(u.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return l.a.createElement(\"div\",{className:\"container\"},l.a.createElement(\"h3\",null,\"Email Verification\"),l.a.createElement(\"div\",{className:\"row z-depth-2\"},l.a.createElement(\"div\",{className:\"col s12 white z-depth-1\"},l.a.createElement(\"form\",null,l.a.createElement(\"div\",{className:\"input-field\"},l.a.createElement(\"input\",{type:\"text\",id:\"email\",value:this.state.email,onChange:this.handleChange}),l.a.createElement(\"label\",{htmlFor:\"email\"},\"Email\"))),l.a.createElement(\"div\",{className:\"btn blue waves-effect waves-light\",onClick:this.handleSubmit},\"Login\"),l.a.createElement(\"br\",null),\"\"===this.state.message?l.a.createElement(\"br\",null):l.a.createElement(\"div\",null,this.state.message))),l.a.createElement(\"h4\",null,\"About This Program\"),l.a.createElement(\"div\",{className:\"row z-depth-2\"},l.a.createElement(\"div\",{className:\"col s12 white z-depth-1\",style:{overflowY:\"auto\",height:300}},l.a.createElement(\"b\",null,\"Description:\"),l.a.createElement(\"p\",null,\"This program simulates the process of verifying newly registered accounts through the use of emails. \",l.a.createElement(\"i\",null,\"Note: Emails using Microsoft Outlook may alter the confirmation url.\")),l.a.createElement(\"b\",null,\"Components:\"),l.a.createElement(\"p\",null,\"ReactJS, MaterializeCSS, GO, MongoDB(mLab)\"),l.a.createElement(\"b\",null,\"Process:\"),l.a.createElement(\"ol\",null,l.a.createElement(\"li\",null,\"The user submits their email address into the form above.\"),l.a.createElement(\"li\",null,\"The email is sent to the back-end through an HTTP request using Axios.\"),l.a.createElement(\"li\",null,\"The GO back-end takes the email and checks to see if the email exists in the MongoDB database.\",l.a.createElement(\"ul\",null,l.a.createElement(\"li\",null,\"If the email does not exist in the database, the user will be sent a verification email.\"),l.a.createElement(\"li\",null,\"If the email already exists, the user will be notified that an email has already been sent.\"))),l.a.createElement(\"li\",null,\"The user will receive an email with the verification link. Upon submission of the link the user's email will then be verified and completely registered into the database.\")))))}}]),t}(n.Component),v=a(54),g=function(e){function t(){var e,a;Object(s.a)(this,t);for(var n=arguments.length,l=new Array(n),i=0;i<n;i++)l[i]=arguments[i];return(a=Object(o.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(l)))).state={message:\"\",redirect:!1},a}return Object(u.a)(t,e),Object(c.a)(t,[{key:\"componentDidMount\",value:function(){var e=this,t=this.props.match.params.id;console.log(t),b.a.get(\"/api/verify/\".concat(t)).then(function(t){e.setState({message:t.data.message+\" You will automatically be redirected to the main page.\"})}),setTimeout(function(){e.setState({redirect:!0})},8e3)}},{key:\"render\",value:function(){return l.a.createElement(\"div\",{className:\"container\"},this.state.message,!1===this.state.redirect?l.a.createElement(\"br\",null):l.a.createElement(v.a,{to:\"/\"}))}}]),t}(n.Component),w=function(e){function t(){return Object(s.a)(this,t),Object(o.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(c.a)(t,[{key:\"render\",value:function(){return l.a.createElement(h.a,null,l.a.createElement(\"div\",{className:\"App\"},l.a.createElement(\"div\",{className:\"container\"},l.a.createElement(d.a,{exact:!0,path:\"/\",component:E}),l.a.createElement(d.a,{path:\"/verify/:id\",component:g}))))}}]),t}(n.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(l.a.createElement(w,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[24,1,2]]]);","extractedComments":[]}